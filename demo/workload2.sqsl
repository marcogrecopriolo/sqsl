{ initialize some vars - alter as you see fit }
let maxproc=10;
let db="sysmaster";
let u="";
let pwd="<*passwd "enter the password, here"*>";

{ control file to flag that children can bash the engine }
output to "/tmp/childend";
display "0" format delimited;
append to default;

{ define some statements }
for s in 0 to 9;
    let st(s)="create temp table t<+get s+>(col1 int)";
    let st(s+10)="insert into t<+get s+> values(?) using random(1000)";
    let st(s+20)="update t<+get s+> set col1=col1-1 where col1=? using random(1000)";
    let st(s+30)="delete from t<+get s+> where col1=? using random(1000)";
    let st(s+40)="select * from t<+get s+>";
    let st(s+50)="drop table t<+get s+>";
done;

<* this is functionally equivalent to the above, although sligthly more
   advanced
let st(0)="create temp table t\<+get random(9)\+>(col1 int)";
let st(1)="insert into t\<+get random(9)+\> values(?) using random(1000)";
let st(2)="update t\<+get random(9)+\> set col1=col1-1 where col1=? using random(1000)";
let st(3)="delete from t\<+get random(9)\+> where col1=? using random(1000)";
let st(4)="select * from t\<+get random(9)\+>";
let st(5)="drop table t\<+get random(9)\+>"; *>

{ fork the children }
clone maxproc into i, p(i);

    { connect, discard errors and output }
    whenever error continue;
    output to "/dev/null";
    connect to db <+get case when (length(u)>0) then
                   'user "<+get u+>" using "<+get pwd+>"' end+>;

    { continually execute statements checking if we have to quit }
    while (1);
	input from "/tmp/childend" pattern delimited into childend;
	if (childend);
	    exit 1;
	fi;
	<*get st(random(6))*>
        <+get st(random(60))+>;
    done;

  { the parent just amorously keeps track of the children }
  parent;
    if (p(i)<0);
	append to "/tmp/childstatus";
	display "child ", i, " error ", dbinfo("errno");
	break;
    fi;
done;

{ wait for user to have had enough }
--<+prompt "just say when to stop"+>

{ change the control file and wait for the offsprings to go away }
output to "/tmp/childend";
display "1" format delimited;
append to default;
wait for p.* into r, d;
done;
